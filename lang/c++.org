* Effective C++
** 让自己习惯 c++
*** 视 c++ 为一个语言联邦
*** 尽量以 =const=, =enum=, =inline= 替换 =#define= 
- 对于单纯常量，最好以 =const= 对象或 =enum= 替换 =#define= 。

  #+BEGIN_SRC C++
    const std::string foo("foo"); // 定义字符串常量
  #+END_SRC

- 当使用 =#define= 定义的符号不会进入符号表若编译错误会显示值而不是符号。
- =#define= 定义了多个相同的常量会在 =object code= 出现多个，而用 =const= 声明不会。
- class 专属常量，为了将常量的作用域 (scope) 限制于 class 内，必须让它成为 class 的一个成员 (member);为了确保此常量之多只有一份，需要让它成为一个 static member
  
  #+BEGIN_SRC C++
    class Foo {
      static const int num = 5;
      int arr[num];
    };
    const int Foo::num; // 必须要有定义

    class Foo { // 若编译器不支持 in-class 初值设定
      static const int num;
      enum { num = 5 }; // 若需要编译期间确定初值使用 enum 
      int arr[num];
    };
    const int Foo::num = 5; // 必须要有定义
  #+END_SRC 

*** 尽可能使用 =const= 
- =const= 出现在星号左边表示被指物是常量，在星号右边表示指针自身是常量，如果两边都有表示两边都是常量。
- =STL= 迭代器是以指针为根据塑模出来，所以迭代器的作用就像是 =T*= 指针。
  - 声明迭代器为 =const= ，即为声明指针为常量(=T* const=)。
  - 使用 =const_iterator= ，表示所指的东西不能改变，即为(=const T*=)。
- 将某些东西声明为 =const= 可帮助编译器侦测出错误用法。 =const= 可被施加于任何作用域内的对象、函数参数、函数返回类型、成员函数本体。
- 编译器强制实施 =bitwise constness= ，但你编写程序时应使用 "概念上的常量性" (conceptual constness)，如 =mutable= 关键字。
- 当 =const= 和 =non-const= 成员函数有着实质等价的实现时，令 =non-const= 版本调用 =const= 版本可避免代码重复。

*** 确定对象被使用前已先被初始化
- 对内置型对象进行手工初始化，因为 c++ 不保证初始化它们。
- 使用 member initialization list 在构造函数初始化类成员，不要在构造函数本体内使用赋值操作。初值列列出的成员变量，其排列次序应该和它们在 class 中声明次序相同。

  #+BEGIN_QUOTE
  在调用构造函数时，c++ 规定对象成员变量的初始化动作发生在进入构造函数本体之前，即在构造函数内部不是被初始化而是赋值操作。初始化发生在成员的 default 构造函数被自动调用时，如果成员变量在 "成员初值列" 中没有被指定为初值时。
  #+END_QUOTE

- 为免除 "跨编译单元之初始化次序" 问题，请以 local static 对象替换 non-local static 对象。
  
  #+BEGIN_SRC C++
    Foo& foo() {
      static Foo foo;
      return foo;
    }
  #+END_SRC

** 构造/析构/赋值运算
*** 了解 c++ 默默编写并调用哪些函数
编译器可以暗自为 class 创建 default 构建函数、copy 构造函数、copy assignment 操作符，以及构造函数。

#+BEGIN_QUOTE
在 "内含 reference 或 const 成员 或 base classes 将 copy assignment 操作符声明为 private" 的 class 内支持赋值操作 (assignment)，必须自己定义 copy assignment 操作符。
#+END_QUOTE

*** 若不想使用编译器自动生成的函数，就该明确拒绝
为了驳回编译器自动提供的机能，可将相应的成员函数声明为 =private= 并且不予实现。使用像 =Uncopyable= 这样的 =base class= 也是一种做法。

*** 为多态基类声明 =virtual= 析构函数
- =polymorphic= (带多态性质的) =base classes= 应该声明一个 =virtual= 析构函数。如果 =class= 带有任何 =virtual= 函数，它就应该拥有一个 =virtual= 析构函数。
  #+BEGIN_QUOTE
  若没有 =virtual= 析构函数存在内存泄漏问题，无法释放子类的内存
  #+END_QUOTE
- =Classes= 的设计目的如果不是作为 =base classes= 使用，或不是为了具有多态性, 就不该声明 =virtual= 析构函数。
  #+BEGIN_QUOTE
  c++ 会为带有 =virtual= 函数的类创建 =vtbl(virtual table)=, 这样会造成不必要的内存占用
  #+END_QUOTE

*** 别让异常逃离析构函数
- 析构函数绝对不要吐出异常。如果一个被析构函数调用的函数可能抛出异常，析构函数应该捕捉任何异常，然后吞下它们(不传播)或结束程序。
- 如果客户需要对某个操作函数运行期间抛出的异常作出反应，那么 =class= 应该提供一个普通函数(而非在析构函数中)执行该操作。

*** 绝不在构造和析构过程中调用 =virtual= 函数
在构造和析构期间不要调用 =virtual= 函数，因为这类调用从不下降至 =derived class= (比起当前执行构造函数和析构函数的那层)。

*** 令 =operator== 返回一个 =reference to *this=
*** 在 =operator== 中处理 "自我赋值"
- 确保当对象自我赋值时 =operator== 有良好行为。其中技术包含比较 "来源对象" 和 "目标对象" 的地址、精心周到的语句顺序、以及 =copy-and-swap= 。
- 确定任何函数如果操作一个以上的对象，而其中多个对象是同一个对象时, 其行为仍然正确。

*** 复制对象时勿忘其每个成分
- =copying= 函数应该确保复制 "对象内的所有成员变量" 及 "所有 =base class= 成分"。
- 不要尝试以某个 =copying= 函数实现另一个 =copying= 函数。应该将共同机能放在第三个函数中, 并由两个 =copying= 函数共同调用。
** 资源管理
*** 以对象管理资源
- 为了防止资源泄漏, 使用 =RAII(Resource Acquisition Is Initialization)= 对象, 它们在构造函数中获得资源并在析构函数中释放资源。
- 两个常被使用的 =RAII classes= 分别是 =shared_ptr= 和 =unique_ptr= 。前者通常是较佳选择，因为其 =copy= 行为比较直观。若选择 =unique_ptr=, 复制行为会使它(被复制物)产生编译错误(=nullptr 除外=), 可以使用 =std::move()= 转移所有权。

*** 在资源管理类中小心 =copy= 行为
- 复制 =RAII= 对象必须一并复制它所管理的资源, 所以资源的 =copying= 行为决定 =RAII= 对象的 =copying= 行为。
- 当一个 =RAII= 对象被复制可能的行为：
  - 禁止复制
  - 对底层资源使用 "引用计数法"(=shared_ptr=)
  - 复制底部资源
  - 转移底部资源的拥有权(=unique_ptr=)

*** 在资源管理类中提供对原始资源的访问
- APIs 往往要求访问原始资源 (raw resources), 所以每个 =RAII class= 应该提供一个 "取得其所管理之资源" 的办法。
- 对原始资源的访问可能经由显式转换或隐式转换。一般而言显式转换比较安全，但隐式转换对客户比较方便。

*** 成对使用 =new= 和 =delete= 时要采取相同形式
如果在 =new= 表达式中使用 =[]= , 必须在相应的 =delete= 表达式中使用 =[]= 。如果你在 =new= 表达式中不使用 =[]= ，一定不要在相应的 =delete= 表达式中使用 =[]=

*** 以独立语句将 newed 对象置入智能指针
以独立语句将 newed 对象存储到智能指针内。如果不这样做，一旦异常抛出，有可能导致难以察觉的资源泄漏。

** 设计与声明
*** 让接口容易被正确使用, 不易被误用
- 好的接口很容易被正确使用, 不容易被误用。你应该在你的所有接口中努力达成这些性质
- "促进正确使用"的办法包括接口的一致性，以及与内置类型的行为兼容。
- "阻止误用"的办法包括建立新类型、限制类型的操作，束缚对象值，以及消除客户的资源管理责任。
- =shared_ptr= 支持定制型删除器(custom deleter)。这可防范 cross-DLL problem, 可被用来自动解除互斥锁等等。

*** 设计 class 犹如设计 type
- *新 type 的对象应该如何被创建和销毁*: class 的构造函数和析构函数以及内存分配函数和释放函数。
- *对象的初始化和对象的赋值该有什么样的差别*: 构造函数和赋值(assignment)操作符的行为，以及其间的差异。
- *新 type 的对象如果被 passed by value(以值传递),意味着什么*: copy 构造函数用来定义一个 type 的 pass-by-value 该如何实现。
- *什么是新 type 的"合法值"*: 对 class 的成员变量而言，通常只有某些数值集是有效的。那些数值集决定了你的 class 必须维护的约束条件(invariants), 也就决定了你的成员函数(特别是构造函数、赋值操作符和所谓 "setter" 函数)必须进行的错误检查工作。它也影响函数抛出的异常、以及(极少被使用的)函数异常明细列(exception specifications)。
- *新 type 需要配合某个继承图系(inheritance graph)吗*: 如果你继承自某些既有的 classes, 你就受到那些 classes 的设计和束缚，特别是受到"它们的函数是 =virtual= 或 =non-virtual=" 的影响。如果你允许其他 classes 继承你的 classes, 那会影响你所声明的函数---尤其是析构函数---是否为 =virtual=
- *新 type 需要什么样的转换*:
- *什么样的操作符和函数对此新 type 而言是合理的*:
- *什么样的标准函数应该驳回*: 那些正是你必须声明为 =private= 者
- *谁该取用新 type 的成员*
- *什么是新 type 的"未声明接口"(undeclared interface)*: 它对效率、异常安全性以及资源运用(例如多任务锁定的动态内存)提供何种保证? 你在这些方面提供的保证将为你的 class 实现代码加上相应的约束条件
- *新 type 有多么一般化*: 或许你其实并非定义一个新 type，而是定义一整个 types 家族。果真如此你就不该定义一个新 class 而是应该定义一个新的 class template。
- *真的需要一个新 type 吗: 如果只是定义新的 derived class 以便为既有的 class 添加机能, 那么说不定单纯定义一个或多个 =non-member= 函数或 =template= , 更能达到目标。

*** 宁以 pass-by-reference to const 替换 pass-by-value
- 尽量以 pass-by-reference-to-const 替换 pass-by-value。前者通常比较高效，并可避免切割问题。
- 以上规则并不使用于内置类型，以及 =STL= 的迭代器和函数对象。对它们而言, pass-by-value 往往比较适当。

*** 必须返回对象时, 别妄想返回其 reference
绝不要返回 pointer 或 reference 指向一个 local stack 对象，或返回 reference 指向一个 heap-allocated, 或返回 pointer 或 reference 指向一个 local static 对象而有可能同时需要多个这样的对象。

*** 将成员变量声明为 =private= 
- 切记将成员变量声明为 =private= 。这可赋予客户访问数据的一致性、可细微划分访问控制、允诺约束条件获得保证，并提供 class 作者以充分的实现弹性。
- =protected= 并不比 =public= 更具封装性。

*** 宁以 non-member、non-friend 替换 member 函数
宁可拿 non-member non-friend 函数替换 member 函数。这样做可以增加封装性、包裹弹性(packaging flexibility)和机能扩充性。

*** 若所有参数皆需类型转换，请为此采用 non-member 函数
如果你需要为某个函数的所有参数(包括被 this 指针所指的那个隐喻参数)进行类型转换，那么这个函数必须是个 non-member

*** TODO 考虑写出一个不抛异常的 swap 函数

** 实现
*** 尽可能延后变量定义式的出现时间
尽可能延后变量定义式的出现。这样做可增加程序的清晰度并改善程序效率。

*** 尽量少做转型动作
- 如果可以，尽量避免转型，特别是在注重效率的代码中避免 =dynamic_casts= 。如果有个设计需要转型动作，试着发展无需转型的替代设计。
- 如果转型是必须的，试着将它隐藏于某个函数背后。客户随时可以调用该函数，而不需将转型放在他们自己的代码内。
- 宁可使用 C++-style(新式)转型，不要使用旧式转型。前者很容易辨识出来，而且也比较有着分门别类的职掌。

*** 避免返回 handles 指向对象内部成分
避免返回 handles(包含 references、指针、迭代器)指向对象内部。遵守这个条款可增加封装性，帮助 =const= 成员函数的行为像个 =const= ，并将发生"虚吊号码牌(dangling handles)"的可能性降至最低。

*** 为"异常安全"而努力是值得的
- 异常安全函数(Exception-safe functions)即使发生异常也不会 *泄露资源* 或 *允许任何数据结构败坏* 。这样的函数区分为以下三种保证:
  - 基本承诺: 如果异常被抛出，程序内的任何事物仍然保持在有效状态下。没有任何对象或数据结构因此而败坏，所有对象都处于一种内部前后一致的状态(例如所有的 class 的约束条件都继续获得满足)。然而程序的现实状态(exact state)恐怕不可预料。
  - 强烈保证: 如果异常被抛出，程序状态不改变。调用这样的函数需有这样的认知: 如果函数成功，就是完全成功，如果函数失败，程序会回复到"调用函数之前"的状态。
  - 不抛掷(nothrow)保证: 承诺绝不抛出异常，因为它们总是能够完成它们原先承诺的功能。作用于内置类型身上的所有操作都提供 nothrow 保证。
- "强烈保证"往往能够以 copy-and-swap 实现出来，但"强烈保证"并非对所有函数都可实现或具备现实意义
- 函数提供的"异常安全保证"通常最高只等于其所调用之各个函数的"异常安全保证"中的最弱者。

*** 透彻了解 inlining 的里里外外
- inline 函数的声明方式:
  - 隐式声明: 将函数定义于 class 定义式内
  - 显式声明: 加关键字 =inline=
- 将大多数 inlining 限制在小型、被频繁调用的函数身上。这可使日后的调试过程和二进制升级更容易。也可使潜在的代码膨胀问题最小化，使程序的速度提升机会最大化。
- 不要只因为 function templates 出现在头文件，就将它们声明为 =inline=

*** 将文件间的编译依存关系降至最低
- 支持"编译依存性最小化"的一般构想是: 相依于声明式，不要相依于定义式。基于此构想的两个手段是 Handle classes 和 Interface classes。
- 程序库头文件应该以"完全且仅有声明式"(full and declaration-only forms)的形式存在。这种做法不论是否涉及 templates 都适用。

** 继承与面对对象设计
*** 确定你的 =public= 继承塑模出 is-a 关系
"public 继承"意味着 is-a。适用于 base classes 身上的每一件事情一定也适用于 derived classes 身上，因为每一个 derived class 对象也都是一个 base class 对象。

*** 避免遮掩继承而来的名称
- derived classes 内的名称会遮掩 base classes 内的名称。在 public 继承下从来没有人希望如此。
- 为了让被遮掩的名称再见天日，可使用 using 声明式或转交函数 (forwarding functions)

*** 区分接口继承和实现继承
- 接口继承和实现继承不同。在 public 继承下，derived classes 总是继承 base class 的接口。
- pure virtual 函数只具体指定接口继承(也可以定义缺省继承)。
- 简朴的(非纯) impure virtual 函数具体指定接口继承及缺省实现继承。
- non-virtual 函数具体指定接口继承以及强制型实现继承。
*** 考虑 virtual 函数以外的其他选择
- virtual 函数的替代方案:
  - 使用 non-virtual interface(NVI) 手法, 那是 Template Method 设计模式的一种特殊形式。他以 public non-virtual 成员函数包裹较低访问性(private 或 protected) 的 virtual 函数。
  - 将 virtual 函数替换为 "函数指针成员变量", 这是 Strategy 设计模式的一种分解表现形式。
  - 以 =tr1::function= 成员变量替换 virtual 函数，因而允许使用任何可调用物(callable entity)搭配一个兼容于需求的签名式。这也是 Strategy 设计模式的某种形式。
  - 将继承体系内的 virtual 函数替换为另一个继承体系内的 virtual 函数。这是 Strategy 设计模式的传统实现手法。
- 将机能从成员函数移到 class 外部函数，带来的一个缺点是，非成员函数无法访问 class 的 non-public 成员。
- =tr1::function= 对象的行为就像一般函数指针。这样的对象可接纳"与给定之目标签名式(target signature)兼容"的所有可调用物(callable entities)

*** 绝不重新定义继承而来的 non-virtual 函数
*** 绝不重新定义继承而来的缺省参数值
绝对不要重新定义一个继承而来的缺省参数值，因为缺省参数值都是静态绑定，而 virtual 函数---你唯一应该覆写的东西是动态绑定的。
*** 通过复合(composition)塑模出 has-a 或"根据某物实现出"
*** 明智而审慎地使用 =private= 继承
- private 继承意味 is-implemented-in-terms of(根据某物实现出)。它通常比复合(composition)的级别低。但是当 derived class 需要访问 protected base class 的成员，或需要重新定义继承而来的 virtual 函数时，这么设计是合理的。
- 和复合(composition) 不同， private 继承可以造成 empty base 最优化。这对致力于"对象尺寸最小化"的程序库开发者而言，可能很重要。
*** 明智而审慎地使用多重继承
- 多重继承比单一继承复杂。它可能导致新的歧义性，以及对 virtual 继承的需要。
- virtual 继承会增加大小、速度、初始化(及赋值)复杂度等成本。如果 virtual base classes 不带任何数据，将是最具实用价值的情况。
- 多重继承的确有正当用途。其中一个情节涉及"public 继承某个 Interface class" 和 "private 继承某个协助实现的 class" 的两相组合。

** 模板与泛型编程
*** 了解隐式接口和编译期多态
- classes 和 templates 都支持接口(interfaces) 和 多态(polymorphism)
- 对 classes 而言接口是显式的(explicit), 以函数签名为中心。多态则是通过 virtual 函数发生于运行期。
- 对 template 参数而言，接口是隐式的(implicit), 奠基于有效表达式。多态则是通过 template 具现化和函数重载解析(function overloading resolution)发生于编译期

*** 了解 =typename= 的双重意义
- 声明 template 参数时，前缀关键字 =class= 和 =typename= 可互换。
- 请使用 =typename= 标识嵌套从属类型名称;但不得在 base class lists(基类列)或 member initialization list(成员初值列)内以它作为 base class 修饰符。

*** 学习处理模板化基类内的名称
可在 derived class templates 内通过 "this->" 指涉 base class template 内的成员名称，或藉由一个明白写出的 "base class 资格修饰符" 完成

*** 将与参数无关的代码抽离
- Templates 生成多个 classes 和多个函数，所以任何 template 代码都不该与某个造成膨胀的 template 参数产生相依关系。
- 因非类型模板参数(non-type template parameters)而造成的代码膨胀，往往可消除，做法是以函数参数或 class 成员变量替换 template 参数。
- 因类型参数(type parameters)而造成的代码膨胀，往往可降低，做法是让带有完全相同二进制表述(binary representations)的具现类型(instantiation types)共享实现码。

*** 运用成员函数模板接受所有兼容类型
- 请使用 member function templates(成员函数模板)生成"可接受所有兼容类型"的函数。
- 如果你声明 member templates 用于"泛化 copy 构造"或"泛化 assignment 操作"，你还需要声明正常的 copy 构造函数和 copy assignment 操作符。

*** 需要类型转换时请为模板定义非成员函数
当编写一个 class template，并需要提供 "与 template 相关的" 且支持 "所有参数之隐式类型转换" 的函数时，请将那些函数定义为 "class template 内部的 =friend= 函数"

*** 请使用 traits classes 表现类型信息
- traits classes 使得"类型相关信息"在编译期可用。它们以 templates 和 "templates 特化"完成实现。
- 整合重载技术(overloading)后，traits classes 有可能在编译期间对类型执行 =if..else= 测试。

*** 认识 template 元编程
- Template meta programming(TMP, 模板元编程)可将工作由运行期移往编译器，因而得以实现早期错误侦测和更高的执行效率。
- TMP 可被用来生成 "基于政策选择组合" (based on combinations of policy choices)的客户定制代码，也可用来避免生成特殊类型并不适合的代码。

** 定制 new 和 delete
*** 了解 new-handler 的行为
- =set_new_handler= 允许客户指定一个函数，在内存分配无法获得满足时被调用。
- Nothrow new 是一个颇为局限的工具，因为它只使用于内存分配; 后继的构造函数调用还是可能抛出异常。

*** 了解 new 和 delete 的合理替换时机
有许多理由需要写个自定的 =new= 和 =delete=, 包括改善效能、对 heap 运用错误进行调试、收集 heap 使用信息

*** 编写 new 和 delete 时需固守常规
- =oprator new= 应该内含一个无穷循环，并在其中尝试分配内存，如果它无法满足内存需求，就该调用 =new-handler= 。它也应该有能力处理 0 bytes 申请。Class 专属版本则还应该处理"比正确大小更大的(错误)申请"。
- =oprator delete= 应该在收到 null 指针时不做任何事。Class 专属版本则还应该处理"比正确大小更大的(错误)申请"。

*** 写了 placement new 也要写 placement delete
- 当你写一个 placement operator new, 请确定也写出了对应的 placement operator delete。如果没有这样做，你的程序可能会发生隐微而时断时续的内存泄漏
- 当你声明 placement new 和 placement delete, 请确定不要无意识(非故意)地遮掩了它们的正常版本。

** 杂项讨论
*** 不要轻忽编译器的警告
- 严肃对待编译器发出的警告信息。努力在你的编译器的最高(最严苛)警告级别下争取"无任何警告"的荣誉。
- 不要过度依赖编译器的报警能力，因为不同的编译器对待事情的态度并不相同。一旦移植到另一个编译器上，你原本依赖的警告信息有可能消失。

*** 让自己熟悉包括 TR1 在内的标准程序库
*** 让自己熟悉 Boost
* std c++
[[file:~/resources/basic/books/lang/c_c++/C++std.pdf][c++ std]]

#+caption: STL 容器能力一览表
|                    | Array        | Vector          | Deque           | List               | Forward List       | Associative     | Unordered      |
|                    |              |                 |                 |                    |                    | Container       | Container      |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 始自               | TR1          | C++98           | C++98           | C++98              | C++11              | C++98           | TR1            |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 典型内部结构       | Static array | Dynamic array   | Array of arrays | Doubly linked list | Singly linked list | Binary tree     | Hash table     |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 元素形式           | Value        | Value           | Value           | Value              | Value              | Set: value      | Set: value     |
|                    |              |                 |                 |                    |                    | Map: key/value  | Map: key/value |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 元素可重复         | Y            | Y               | Y               | Y                  | Y                  | Multiset or     | Multiset or    |
|                    |              |                 |                 |                    |                    | multimap Y      | multimap Y     |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 迭代器类型         | 随机访问     | 随机访问        | 随机访问        | 双向               | 单向(向前)         | 双向,           | 单向,          |
|                    |              |                 |                 |                    |                    | key 为常量      | key 为单量     |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 扩/缩              | 不可         | 一端可          | 两端可          | 各处皆可           | 各处皆可           | 各处皆可        | 各处皆可       |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 随机访问           | Y            | Y               | Y               | N                  | N                  | N               | Almost         |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 元素查找           | 慢           | 慢              | 慢              | 很慢               | 很慢               | 快              | 很快           |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 安插/移除致        | ---          | 重新分配时      | 总如此          | 绝不会             | 绝不会             | 绝不会          | Rehashing      |
| iterator 失效      |              |                 |                 |                    |                    |                 | 时会           |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 安插/移除致        |              |                 |                 |                    |                    |                 |                |
| pointer、reference | ---          | 重新分配时      | 总如此          | 绝不会             | 绝不会             | 绝不会          | 绝不会         |
| 失效               |              |                 |                 |                    |                    |                 |                |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 允许保留内存       | ---          | Y               | N               | ---                | ---                | ---             | Y(bucket)      |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 释放被移除元素     | ---          | shrink_to_fit() | 有时候          | 总如此             | 总如此             | 总如此          | 有时候         |
| 之内存             |              | 才可以          |                 |                    |                    |                 |                |
|--------------------+--------------+-----------------+-----------------+--------------------+--------------------+-----------------+----------------|
| 事务安全(要么      | 否           | 尾端 push/pop   | 头尾两端        | 所有安插和移除     | 所有安插和移除     | 单元素安插及    | 单元素安插及   |
| 成功要么无效)      |              |                 | push/pop        |                    |                    | 所有移除动作    | 所有移除动作   |
|                    |              |                 |                 |                    |                    | (但是 comparing | (但是 hashing  |
|                    |              |                 |                 |                    |                    | 不能抛出异常)   | 和 comparing   |
|                    |              |                 |                 |                    |                    |                 | 不能抛出异常)  |


** std::move
#+DOWNLOADED: screenshot @ 2020-05-10 14:47:46
[[file:image/std_c++/-2020-05-10-14-47-46screenshot.png]]


* skill
** clip to range
#+BEGIN_SRC C++
  template <class T, class V>
  static void ClipToRange(T* ptr, V minvalue, V maxvalue) {
    if (static_cast<V>(*ptr) > maxvalue) *ptr = maxvalue;
    if (static_cast<V>(*ptr) < minvalue) *ptr = minvalue;
  }
#+END_SRC
